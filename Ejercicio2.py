# -*- coding: utf-8 -*-
"""Ejercicio2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hE1FHmYdkGj4TKc-GwgQ7eDWrT8mhRww
"""

#   Codigo que implementa un esquema numerico  para determinar la aproximacion de Leibniz
#
#           Autor:
#   David Osvaldo Chay May
#   may876518@gmail.com
#   Version 2.0 : 07/02/2025
#

import numpy as np
import matplotlib.pyplot as plt

def leibniz_pi(n):
    return 4 * sum((-1)**k / (2*k + 1) for k in range(n))


true_pi = np.pi
N_values = [10, 100, 1000, 10000]  # se realiza una lista con diferentes cantidades de términos de la serie para la aproximación
errors_abs = []  # Aqui se almacenan los errore absolutos
errors_rel = []  #  Aqui se almacenan los errore relativos
errors_cua = []  #  Aqui se almacenan los errore cuadraticos

for N in N_values:
    approx_pi = leibniz_pi(N)
    error_abs = abs(true_pi - approx_pi)
    error_rel = error_abs / true_pi
    error_cua = error_abs**2
    errors_abs.append(error_abs)  # Se almacena el error absoluto en la lista 
    errors_rel.append(error_rel)  # Se almacena el error relativo
    errors_cua.append(error_cua)  # Se almacena el error cuadratico
    print(f"N={N}: Error absoluto={error_abs}, Error relativo={error_rel}, Error cuadrático={error_cua}")  # Se muestran los errores calculados para cada uno


plt.figure()
plt.plot(N_values, errors_abs, label='Error absoluto', marker='o')  # Se grafica el error absoluto con marcadores circulares
plt.plot(N_values, errors_rel, label='Error relativo', marker='s')  # Se grafica el error relativo con marcadores cuadrados
plt.plot(N_values, errors_cua, label='Error cuadrático', marker='^')  # Se grafica el error cuadrático con marcadores triangulares
plt.xscale('log')
plt.yscale('log')
plt.xlabel('N')  # Se le agrega una etiqueta al eje x
plt.ylabel('Error')  # Se le agrega una etiqueta al eje x
plt.legend()
plt.title('Errores en la aproximación de π')
plt.show()  # Muestra la grafica 
