# -*- coding: utf-8 -*-
"""Ejercicio3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CRE3zcAbWFKcVO2L1HMOwbHFBPf0GVVM
"""

#   Codigo que implementa un esquema numerico
#
#
#           Autor:
#   David Osvaldo Chay May
#   may876518@gmail.com
#   Version 1.0 : 07/02/2025
#

import numpy as np
import matplotlib.pyplot as plt



def calcular_errores(x, y, valor_real):
    # Función para calcular la diferencia y los errores absoluto, relativo y porcentual.
    diferencia = x - y  # La diferencia de los valores aproximados
    error_abs = abs(valor_real - diferencia)
    error_rel = error_abs / abs(valor_real)
    error_pct = error_rel * 100

    # se muestran los resultados
    print(f"Diferencia: {diferencia}")
    print(f"Error absoluto: {error_abs}")
    print(f"Error relativo: {error_rel}")
    print(f"Error porcentual: {error_pct}%")

    return error_abs, error_rel, error_pct  # Retornamos los valores calculados

# Datos de prueba con valores x, y y el valor real esperado
valores = [(1.0000001, 1.0000000, 0.0000001),
           (1.000000000000001, 1.000000000000000, 0.000000000000001)]

# se almacenan los errores
errores_abs = []
errores_rel = []
errores_pct = []

# Iteramos y calculamos los errores
for x, y, real in valores:
    print(f"\nPara x={x}, y={y}:")
    error_abs, error_rel, error_pct = calcular_errores(x, y, real)

    # Guardamos los resultados (errores)
    errores_abs.append(error_abs)
    errores_rel.append(error_rel)
    errores_pct.append(error_pct)


fig, ax = plt.subplots(figsize=(10, 6))
indices = np.arange(len(valores))  # Definimos los índices para el eje X

# Graficamos los errores con colores para que se diferencien
ax.plot(indices, errores_abs, label="Error Absoluto", marker='o', color='b')
ax.plot(indices, errores_rel, label="Error Relativo", marker='o', color='g')


ax.set_title('Errores Absoluto, Relativo y Porcentual')
ax.set_xlabel('Índice de los valores')
ax.set_ylabel('Valor de los errores')
ax.set_xticks(indices)  # Posiciones en el eje X
ax.set_xticklabels([f'x={x}, y={y}' for x, y, real in valores])  # Nombramos los valores
ax.legend()

plt.tight_layout()  # Se ajusta el diseño del grafico
plt.show()  # Se muestra el grafico
